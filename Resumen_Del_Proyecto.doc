# Resumen del Proyecto: AeroNeon

## 1. Tecnología y Desarrollo

Este proyecto consiste en una aplicación web de reserva de vuelos y su correspondiente suite de pruebas automatizadas.

*   **Aplicación Web:** Desarrollada con tecnologías web estándar:
    *   HTML5
    *   CSS3 (para estilos y animaciones de neón)
    *   JavaScript (Vanilla JS) para la lógica de la aplicación (búsqueda, selección, flujo de compra).

*   **Suite de Pruebas:** El entorno de automatización está construido sobre Node.js y utiliza las siguientes librerías clave:
    *   **Jest:** Como corredor de pruebas (test runner), motor de aserciones y para la estructura general de las pruebas.
    *   **Selenium WebDriver:** Para la automatización y control de los navegadores web.
    *   **Jest-Image-Snapshot:** Para realizar pruebas de regresión visual, comparando capturas de pantalla contra una imagen de referencia.
    *   **Jest-HTML-Reporters:** Para generar reportes de resultados de pruebas en formato HTML.

## 2. Arquitectura Principal

La arquitectura del proyecto se divide en dos componentes principales co-ubicados en el mismo repositorio:

*   **Aplicación (Frontend):**
    *   `vuelos-index.html`: La estructura principal de la página.
    *   `vuelos-style.css`: Define la apariencia visual, incluyendo el tema de neón.
    *   `vuelos-logic.js`: Contiene toda la interactividad, como la lógica de búsqueda de vuelos, la gestión de formularios y el flujo de compra.

*   **Automatización de Pruebas:**
    *   **Configuración Centralizada:** El archivo `jest.setup.js` maneja la inicialización y cierre de los navegadores (Chrome, Firefox, Edge) de forma centralizada antes de que se ejecuten las pruebas.
    *   **Scripts de Ejecución:** El archivo `package.json` contiene scripts (`npm run test:chrome`, `npm run test:firefox`, `npm run test:edge`) para lanzar las pruebas en los diferentes navegadores.
    *   **Gestión de Drivers:** Los drivers de los navegadores son gestionados por sus respectivos paquetes de npm (`chromedriver`, `geckodriver`) o mediante un script de descarga automática (`prepare-edge.js`) para asegurar la compatibilidad y portabilidad.
    *   **Snapshots Aislados:** Las imágenes para las pruebas visuales se guardan en directorios separados por navegador (`__image_snapshots__/chrome/`, `__image_snapshots__/firefox/`, etc.) para evitar conflictos.

## 3. Pruebas y Propósito

La suite de pruebas está diseñada para garantizar la calidad y estabilidad de la aplicación desde diferentes ángulos:

*   **`compra_vuelo.test.js` (Prueba E2E - End-to-End):**
    *   **Propósito:** Simular y validar el flujo más crítico de la aplicación: la compra completa de un vuelo de ida y vuelta. Asegura que la funcionalidad principal siempre esté operativa.

*   **`responsividad.test.js` (Prueba de UI/UX):**
    *   **Propósito:** Verificar que la interfaz de usuario se adapte y se muestre correctamente en diferentes tamaños de pantalla (móvil, tablet y escritorio). Garantiza una buena experiencia de usuario en cualquier dispositivo.

*   **`validaciones_negativas.test.js` (Prueba de Robustez):**
    *   **Propósito:** Probar cómo reacciona la aplicación ante entradas inválidas del usuario (ej. formularios vacíos, datos incorrectos). Asegura que el sistema maneje los errores de forma elegante y no permita el paso de datos corruptos.

*   **`visual.test.js` (Prueba de Regresión Visual):**
    *   **Propósito:** Tomar capturas de pantalla de la aplicación y compararlas con versiones de referencia. Su objetivo es detectar cualquier cambio visual no deseado (ej. un botón desalineado, un color incorrecto), asegurando la consistencia de la UI.

## 4. Entorno de Desarrollo y Ejecución

Para trabajar con este proyecto, es fundamental entender su base en Node.js.

*   **Conceptos Clave del Proyecto Node.js:**
    *   **`package.json`:** Es el corazón del proyecto. Define sus propiedades, dependencias (librerías como Selenium y Jest) y los scripts de ejecución.
    *   **`node_modules/`:** Carpeta (generalmente no visible en el IDE) donde se descargan e instalan todas las dependencias listadas en `package.json`.
    *   **Primer Paso Esencial:** Antes de ejecutar cualquier cosa, siempre se debe ejecutar el comando `npm install` en la terminal. Este comando lee el `package.json` y descarga todo lo necesario para que las pruebas funcionen.

*   **Cómo Ejecutar las Pruebas:**
    Todas las pruebas se lanzan desde la terminal, en la raíz del proyecto, utilizando los siguientes comandos:
    *   `npm run test:chrome`: Ejecuta la suite completa de pruebas en Google Chrome.
    *   `npm run test:firefox`: Ejecuta la suite completa de pruebas en Mozilla Firefox.
    *   `npm run test:edge`: Ejecuta la suite completa de pruebas en Microsoft Edge. La primera vez, este comando detectará la versión de Edge instalada y descargará el driver correspondiente.

*   **Cómo Importar en un IDE (Visual Studio Code):**
    1.  Abre Visual Studio Code.
    2.  Ve a "File" > "Open Folder..." (o "Archivo" > "Abrir Carpeta...").
    3.  Selecciona la carpeta raíz del proyecto (`C:\Users\MarcelinocruzRosa\git\proyectox`).
    4.  ¡Listo! El IDE reconocerá automáticamente el `package.json` y podrás abrir una terminal integrada ("Terminal" > "New Terminal") para ejecutar los comandos `npm` directamente.